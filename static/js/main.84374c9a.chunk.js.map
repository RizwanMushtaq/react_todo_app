{"version":3,"sources":["components/TodoTitle.js","components/TodoInput.js","App.js","reportWebVitals.js","index.js"],"names":["title","fontSize","margin","TodoTitle","style","TodoInput","props","onSubmit","addTodoHandler","type","className","onInput","document","querySelector","value","trim","border","App","addTodo","event","console","log","inputFieldText","setState","state","todoArray","concat","id","count","done","saveDataInLocalStorage","preventDefault","updateToDoneTodo","target","parentElement","firstChild","textDecoration","backgroundColor","forEach","element","parseInt","updateToDeleteTodo","index","indexOf","splice","arrayData","localStorage","setItem","JSON","stringify","updateDoneItemsinDOM","todoLI","querySelectorAll","item","parse","getItem","this","maxId","map","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.84374c9a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst title = {\r\n    fontSize: '3rem',\r\n    margin: '1rem'\r\n}\r\n\r\nfunction TodoTitle() {\r\n    return (\r\n        <div>\r\n            <h1 style={title}>My ToDo App</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoTitle\r\n","import React from 'react'\r\nimport './styleTodoInput.css' \r\n\r\nfunction TodoInput(props) {\r\n\r\n    function updateInputField(){\r\n        if(document.querySelector('.inputField').value.trim() === '' ){\r\n            //do nothing\r\n        }else{\r\n            document.querySelector(\".inputField\").style.border = \"none\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit= {props.addTodoHandler}>\r\n                <input type='text' \r\n                className='inputField'\r\n                onInput= {updateInputField}>\r\n                </input>\r\n\r\n                <button\r\n                className='addTodoButton' \r\n                type= 'submit'>\r\n                Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoInput\r\n\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport './components/styleTodoList.css'\r\n\r\nimport TodoTitle from './components/TodoTitle'\r\nimport TodoInput from './components/TodoInput'\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n      count: 1,\r\n      todoArray: []\r\n    }\r\n  }\r\n\r\n  //Function to be called when adding item to the list*****************************************************************\r\n  addTodo = (event) =>{\r\n    console.log(\"addToDO function\")\r\n    let inputFieldText = document.querySelector('.inputField').value\r\n    if(inputFieldText.trim() === ''){\r\n      document.querySelector(\".inputField\").style.border = \"solid red\"\r\n    }else{\r\n      this.setState( \r\n        (state) => {\r\n          let todoArray = state.todoArray.concat(\r\n            {id: state.count,\r\n            title: inputFieldText,\r\n            done: false}\r\n          )\r\n          \r\n          let count = state.count + 1\r\n  \r\n          return {\r\n            todoArray, \r\n            count\r\n          }\r\n        },\r\n        () => {\r\n          console.log(this.state.count)\r\n          console.log(this.state.todoArray)\r\n          //Saving data in Local Storage\r\n          this.saveDataInLocalStorage(this.state.todoArray)\r\n        }\r\n      )\r\n\r\n      document.querySelector(\".inputField\").style.border = \"none\"\r\n    }\r\n\r\n    //Clear Input field after adding item to the list\r\n    document.querySelector(\".inputField\").value = ''\r\n    event.preventDefault()\r\n    \r\n  }\r\n\r\n  //Function to be called when setting item to done state*****************************************************************\r\n  updateToDoneTodo = (event)=> {\r\n    // console.log(event)\r\n    // console.log(event.target.parentElement.parentElement.id)\r\n    event.target.parentElement.parentElement.firstChild.style.textDecoration = 'line-through'\r\n    event.target.parentElement.parentElement.style.backgroundColor = '#d3d3d3'\r\n\r\n    this.setState(\r\n      (state) => {\r\n        state.todoArray.forEach(element => {\r\n\r\n          if(element.id === parseInt(event.target.parentElement.parentElement.id)){\r\n            element.done = true\r\n          }\r\n        });\r\n        return (state.todoArray)\r\n      },\r\n      () => {\r\n        // console.log(this.state.count)\r\n        console.log(this.state.todoArray)\r\n        this.saveDataInLocalStorage(this.state.todoArray)\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  //function to be called when deleting item from the list*****************************************************************\r\n  updateToDeleteTodo = (event)=> {\r\n    this.setState(\r\n      (state) => {\r\n        state.todoArray.forEach(element=>{\r\n          if(element.id === parseInt(event.target.parentElement.parentElement.id)){\r\n            let index = state.todoArray.indexOf(element)\r\n            if(index > -1){\r\n              state.todoArray.splice(index,1)\r\n            }\r\n          }\r\n        })\r\n        return (state.todoArray)\r\n      },\r\n      () => {\r\n        // console.log(this.state.count)\r\n        console.log(this.state.todoArray)\r\n        this.saveDataInLocalStorage(this.state.todoArray)\r\n      }\r\n    )\r\n  }\r\n\r\n  //Function to save data in Local storage*****************************************************************\r\n  saveDataInLocalStorage = (arrayData)=> {\r\n    localStorage.setItem(\"myTodoList\", JSON.stringify(arrayData))\r\n  }\r\n  //Function to set item to done by reading dataarray (its called on window onload time)*****************************************************************\r\n  updateDoneItemsinDOM = (arrayData)=> {\r\n    let todoLI = document.querySelectorAll('.todoLI');\r\n    // console.log(todoLI);\r\n    // console.log(arrayData);\r\n    if(arrayData){\r\n      arrayData.forEach(element=>{\r\n        if(element.done){\r\n          todoLI.forEach(item=> {\r\n            if(parseInt(item.id) === element.id){\r\n              item.firstChild.style.textDecoration = 'line-through'\r\n              item.style.backgroundColor = '#d3d3d3'\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n  //Function to load data from Local Storage*****************************************************************\r\n  componentDidMount(){\r\n    console.log('In component did mount function')\r\n    let arrayData = JSON.parse(localStorage.getItem(\"myTodoList\"))\r\n    \r\n    if(arrayData){\r\n      this.setState(\r\n        (state)=> {\r\n          state.todoArray = arrayData\r\n          let maxId = 1\r\n          arrayData.forEach(item => {\r\n            if(item.id>maxId){\r\n              maxId = item.id\r\n            } \r\n          })\r\n          state.count = maxId+1\r\n          return (state.todoArray, state.count)\r\n        },\r\n        () => {\r\n          console.log(this.state.todoArray)\r\n          console.log(this.state.count)\r\n          this.updateDoneItemsinDOM(this.state.todoArray)\r\n        }\r\n      )\r\n    }\r\n  }\r\n  //Function to render DOM*****************************************************************\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"App\">\r\n        \r\n          <TodoTitle />\r\n          \r\n          <TodoInput addTodoHandler = {this.addTodo}></TodoInput>\r\n\r\n          <ul className='todoUL'>\r\n            {this.state.todoArray.map(item => (\r\n              <li key={item.id} id={item.id} className='todoLI'> \r\n                <p>{item.title}</p>\r\n                <div>\r\n                  <button onClick={this.updateToDoneTodo}>Done</button>\r\n                  <button onClick={this.updateToDeleteTodo}>Delete</button>\r\n                </div> \r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n        \r\n      </div>\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}